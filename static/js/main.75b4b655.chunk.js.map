{"version":3,"sources":["components/ImageGrid.js","components/Table.js","App.js","reportWebVitals.js","index.js"],"names":["ImageGrid","imgUrl","imgTitle","imgId","isCompareClikced","buttonToggleHandler","className","src","alt","onClick","Table","dataObj","length","id","Object","keys","map","key","index","toUpperCase","imgItem","albumId","title","url","thumbnailUrl","App","useState","imgData","setImgData","tableData","setTableData","useEffect","a","fetch","data","json","imageData","fetchData","filter","item","updatedTableData","concat","apply","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAqBeA,EAnBG,SAAC,GAAwE,IAAtEC,EAAqE,EAArEA,OAAQC,EAA6D,EAA7DA,SAAUC,EAAmD,EAAnDA,MAAOC,EAA4C,EAA5CA,iBAAkBC,EAA0B,EAA1BA,oBAE5D,OACI,sBAAKC,UAAU,YAAf,UACI,qBAAKC,IAAKN,EAAQO,IAAI,QACtB,yCAAYN,KACZ,sCAASC,KACT,uCAAUF,KACV,wBACIK,UAAWF,EAAiBD,GAAS,SAAW,UAChDM,QAAS,kBAAMJ,EAAoBF,IAFvC,SAIKC,EAAiBD,GAAS,SAAW,gBC8BvCO,EA1CD,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAyBb,OACI,qBAAKL,UAAU,iBAAf,SAEQK,EAAQC,OAAS,GAAK,uBAAOC,GAAG,SAAV,SAClB,kCACI,+BACI,uCAZPC,OAAOC,KAAKJ,GAAWA,EAAQ,IAC9BK,KAAI,SAACC,EAAKC,GACpB,OAAO,6BAAiBD,EAAIE,eAAZD,SAlBbP,EAAQK,KAAI,SAACI,GAAa,IACrBC,EAA0CD,EAA1CC,QAASR,EAAiCO,EAAjCP,GAAIS,EAA6BF,EAA7BE,MAAOC,EAAsBH,EAAtBG,IAAKC,EAAiBJ,EAAjBI,aACjC,OACI,+BACI,6BAAI,qBAAKlB,UAAW,WAAYC,IAAKgB,EAAKf,IAAI,OAC9C,6BAAKa,IACL,6BAAKR,IACL,6BAAKS,IACL,6BAAKC,IACL,6BAAKC,MANAX,c,MCuDVY,MA1Df,WAAgB,IAAD,EAEiBC,mBAAS,IAF1B,mBAENC,EAFM,KAEGC,EAFH,OAGqBF,mBAAS,IAH9B,mBAGNG,EAHM,KAGKC,EAHL,KAMbC,qBAAU,WAAM,4CACd,8BAAAC,EAAA,sEACmBC,MAAM,yDADzB,cACMC,EADN,gBAEwBA,EAAKC,OAF7B,OAEMC,EAFN,OAIER,EAAWQ,GAJb,4CADc,uBAAC,WAAD,wBAQdC,KACC,IAGH,IAAMjC,EAAmB,SAACD,GAExB,QADa0B,EAAUS,QAAO,SAACC,GAAD,OAAUA,EAAK1B,KAAOV,KACzCS,QAkBb,OACE,sBAAKN,UAAU,MAAf,UAEE,qBAAKA,UAAU,OAAf,SACGqB,EAAQX,KAAI,SAACI,EAASF,GACrB,OAAO,cAAC,EAAD,CAELjB,OAAQmB,EAAQG,IAChBrB,SAAUkB,EAAQE,MAClBnB,MAAOiB,EAAQP,GACfT,iBAAkBA,EAClBC,oBAAqB,kBArBH,SAACF,GAC3B,GAAIC,EAAiBD,GAAQ,CAC3B,IAAIqC,EAAmBX,EAAUS,QAAO,SAAClB,GAAD,OAAaA,EAAQP,KAAOV,KACpE2B,EAAaU,OACR,CACL,IAAIA,EAAmBb,EAAQW,QAAO,SAAClB,GAAD,OAAaA,EAAQP,KAAOV,KAClE2B,EAAa,GAAGW,OAAOC,MAAV,YAAoBb,GAAYW,KAeZnC,CAAoBe,EAAQP,MALlDK,QASX,cAAC,EAAD,CAAOP,QAASkB,QC9CPc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.75b4b655.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst ImageGrid = ({ imgUrl, imgTitle, imgId, isCompareClikced, buttonToggleHandler }) => {\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <img src={imgUrl} alt=\"img\"></img>\r\n            <p>Title:- {imgTitle}</p>\r\n            <p>ID:- {imgId}</p>\r\n            <p>URL:- {imgUrl}</p>\r\n            <button\r\n                className={isCompareClikced(imgId) ? \"remove\" : \"compare\"}\r\n                onClick={() => buttonToggleHandler(imgId)}\r\n            >\r\n                {isCompareClikced(imgId) ? \"Remove\" : \"Compare\"}\r\n            </button>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ImageGrid;\r\n","import React from 'react';\r\n\r\nconst Table = ({ dataObj }) => {\r\n\r\n    const renderTabledata = () => {\r\n        return dataObj.map((imgItem) => {\r\n            const { albumId, id, title, url, thumbnailUrl } = imgItem  //destructuring\r\n            return (\r\n                <tr key={id}>\r\n                    <td><img className={\"tableImg\"} src={url} alt=\"\"></img></td>\r\n                    <td>{albumId}</td>\r\n                    <td>{id}</td>\r\n                    <td>{title}</td>\r\n                    <td>{url}</td>\r\n                    <td>{thumbnailUrl}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    const renderTableHeader = () => {\r\n        let header = Object.keys(dataObj && dataObj[0]);\r\n        return header.map((key, index) => {\r\n            return <th key={index}>{key.toUpperCase()}</th>\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"tableContainer\">\r\n            {\r\n                dataObj.length > 0 && <table id='images'>\r\n                    <tbody>\r\n                        <tr>\r\n                            <th>Image</th>\r\n                            {renderTableHeader()}\r\n                        </tr>\r\n                        {renderTabledata()}\r\n                    </tbody>\r\n                </table>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table;","import React, { useState, useEffect } from 'react';\r\nimport ImageGrid from './components/ImageGrid';\r\nimport Table from './components/Table';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n\r\n  const [imgData, setImgData] = useState([]);\r\n  const [tableData, setTableData] = useState([]);\r\n\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      let data = await fetch('https://jsonplaceholder.typicode.com/photos/?_limit=3');\r\n      let imageData = await data.json();\r\n\r\n      setImgData(imageData);\r\n    }\r\n\r\n    fetchData();\r\n  }, [])\r\n\r\n\r\n  const isCompareClikced = (imgId) => {\r\n    let result = tableData.filter((item) => item.id === imgId);\r\n    if (result.length) {\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n\r\n\r\n  const buttonToggleHandler = (imgId) => {\r\n    if (isCompareClikced(imgId)) {\r\n      let updatedTableData = tableData.filter((imgItem) => imgItem.id !== imgId);\r\n      setTableData(updatedTableData);\r\n    } else {\r\n      let updatedTableData = imgData.filter((imgItem) => imgItem.id === imgId);\r\n      setTableData([].concat.apply([...tableData], updatedTableData));\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      \r\n      <div className=\"grid\">\r\n        {imgData.map((imgItem, index) => {\r\n          return <ImageGrid\r\n            key={index}\r\n            imgUrl={imgItem.url}\r\n            imgTitle={imgItem.title}\r\n            imgId={imgItem.id}\r\n            isCompareClikced={isCompareClikced}\r\n            buttonToggleHandler={() => buttonToggleHandler(imgItem.id)}\r\n          />\r\n        })}\r\n      </div>\r\n      <Table dataObj={tableData} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}